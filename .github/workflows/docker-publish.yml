name: build-and-push

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CARGO_PROFILE: release
  CARGO_TERM_COLOR: always

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

jobs:
  docker:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      id-token: write
      
    steps:
      - name: checkout
        uses: actions/checkout@v2
        
      - name: set up qemu
        uses: docker/setup-qemu-action@v1
        
      - name: install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@main
        
      - name: build rust app
        run: cargo build --${{ env.CARGO_PROFILE }} --verbose
        
      - name: copy executable
        run: |
          mkdir docker
          cp target/${{ env.CARGO_PROFILE }}/${{ env.IMAGE_NAME }} docker/
      
      - name: setup docker buildx
        uses: docker/setup-buildx-action@v1
        
      - name: set docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        
      - name: log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: build and push to registry
        id: build-and-push
        uses: docker/build-push-action@v2
        with:
          context: docker/
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: sign the published docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
